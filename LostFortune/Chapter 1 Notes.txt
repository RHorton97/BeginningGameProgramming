Chapter 1 Notes

Game To Make: Lost Fortune

Error Types:
	- Compile errors: Often syntax errors, these errors occur during the compilationprocess of the code
	- Link errors: These occur during the linking process and indicate that something the program references externally
	  cannot be found
	- Run-time errors: These occur when the executable file is being run, they can cause the program to crash abruptly
	  or act in unexpected ways if the error is a logic error

Arithmetic Operators: Order of Operations
	http://en.cppreference.com/w/cpp/language/operator_precedence

Naming Variables: The Rules
	- An identifier can contain only numbers, letters, and underscores
	- An identifier can't start with a number
	- An identifier can't be a C++ keyword

Combined Assignment Operators
	Symbol	Example		Equivalent
	+=		x += 5		x = x + 5
	-=		x -= 5		x = x - 5
	*=		x *= 5		x = x * 5
	/=		x /= 5		x = x / 5
	%=		x %= 5		x = x % 5

Increment Operator: ++ (adds 1 to a value)
Decrement Operator: -- (subtracts 1 from a value)

Prefix and suffix increment/decrement operators work differently. A prefix such as ++x will increment x then perform other
operations when it is included in a larger statement such as ++x * 10. A suffix operator such as x-- will decrement x after
performing the other operations in a larger statement. Check order of operations for the specific order.

If a variable is assigned or reaches a value greater than the maximum one it can hold it will 'wraparound' to its minimum
value and vice versa.

A variable can be made constant when it is declared so that it keeps its initial value and cannot be changed, this helps
to avoid unintentional changes being made to the variable when it is being used by the program.
(Convention to give constants a name in all capitals such as ALIEN_POINTS)

Enumerators/Enumerations
	An enumeration is a set of unsigned int constants called enumerators, the enumerators are usually related and have a
	particular order however they do not have to.

	Example:
		enum difficulty {NOVICE, EASY, MEDIUM, HARD = 10, UNBEATABLE};
		difficulty myDifficulty = EASY;

	This example creates an enumeration called difficulty and as it does not have any values set within the definition it
	uses the default of starting at 0 and increasing by 1 each time. A variable of this new enumeration type is declared
	and set equal to EASY which is equal to 1. As UNBEATBALE is undefined, it takes the previous value and adds 1 to
	generate its own value so in this case UNBEATABLE is equal to 11.